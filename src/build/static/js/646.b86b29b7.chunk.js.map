{"version":3,"file":"static/js/646.b86b29b7.chunk.js","mappings":"sjQA4IA,EApIkB,WAEd,MAAeA,EAAAA,EAAAA,UAARC,GAAsB,YAAlB,GACX,EAA+BC,EAAAA,EAAAA,WAAgB,eAAxCC,EAAK,KAAEC,EAAa,KACrBC,GAAWC,EAAAA,EAAAA,MACXC,EAAU,SAACC,EAAiBC,GAC9BN,EAAMI,QAAQ,CACVG,UAAW,MACXC,MAAO,iCACPC,MAAM,SAACC,EAAA,EAAyB,IAChCC,SACI,8BAEgC,IAAxBL,GACI,gBAAKM,UAAU,gBAAe,SAAE,4WACR,IAAxBN,GACI,gBAAKM,UAAU,gBAAe,SAAE,+gBACR,IAAxBN,GACI,gBAAKM,UAAU,gBAAe,SAAE,wiBAChC,iBAAKA,UAAU,gBAAe,UAAE,6BAAON,EAAoB,ugBAGnFO,OAAQ,iCACRC,WAAY,iCACZC,cAAe,CAAEC,KAAM,UAAWC,QAAQ,GAC1CC,KAAM,WACFb,IACAH,EAAS,WACb,EACAiB,UAAW,CAAEC,WAAY,UAAWC,OAAQ,GAC5CC,kBAAkB,CAACC,MAAM,CAACH,WAAW,aAE7C,EAEMI,EAAY,yCAAG,WAAOC,GAAO,8EAC3BC,EAAc,EACdC,EAAc,GAClBC,EAAAA,SAAkB,SAACC,EAAMC,QACaC,IAA9BN,EAAQ,SAAD,OAAUK,EAAI,KACrBD,EAAKG,cAAgBF,EACjBD,EAAKI,mBAAqBJ,EAAKG,cAC/BH,EAAKK,QAAS,EAEdL,EAAKK,QAAS,IAGlBR,GAA4B,EAC5BG,EAAKG,cAAgB,KACrBH,EAAKK,OAAS,MAElBP,EAAYQ,KAAKN,EACrB,IACAzB,GAAQ,kBAAMgC,aAAaC,QAAQ,UAAWC,KAAKC,UAAUZ,GAAa,GAAED,GAAY,2CAC3F,gBAnBiB,sCAqBlB,OACI,gCACKzB,GACD,UAAC,IAAI,CACDuC,KAAK,WACL1C,KAAMA,EACN2C,OAAO,WACPC,SAAUlB,EAAa,WAGvB,yBAEQI,EAAAA,KAAc,SAACC,EAAMC,GACjB,OACI,oBACIlB,UAAU,uCAEVW,MAAO,CAAEH,WAAY,UAAWuB,WAAY,EAAGC,aAAc,EAAGC,aAAc,GAAIC,UAAW,IAAK,UAClG,UAAC,IAAI,CAACvB,MAAO,CAAEwB,MAAO,OAAQ3B,WAAY,WAAa4B,UAAU,EAAOxC,MAAK,+CAAYsB,EAAI,GAAI,WAC7F,SAAC,IAAK,CAACvB,UAAU,WAAU,UACvB,UAAC,cAAoB,CAAC0C,QAAM,EAAC1B,MAAO,CAAE2B,SAAU,IAAK,UAE7CrB,EAAKsB,SACR,eAIT,SAAC,SAAS,CACNX,KAAI,gBAAWV,EAAI,GAAI,UAEvB,SAAC,WAAW,WACR,SAAC,IAAK,CAACvB,UAAU,WAAU,SAEnBsB,EAAKuB,QAAQC,KAAI,SAACC,EAAQC,GAAC,OACvB,SAAC,KAAK,CAEFC,MAAOF,EACP/B,MAAO,CAAE2B,SAAU,IAAK,SAEvBI,GAJIC,EAAI,EAKL,cAxB3BzB,EAAI,EAiCrB,OAIR,gBAAKlB,UAAU,sCAAqC,UAChD,SAAC,IAAM,CACH6C,KAAK,QACLzC,KAAK,UACL0C,MAAM,SACNC,SAAS,SACT/C,UAAU,oDACVW,MAAO,CACHqC,SAAU,SACVC,gBAAiB,uBACjBC,OAAQ,EACRC,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEhBzD,MAAM,SAAC,MAAoB,CAACgD,KAAM,mBAM1D,C","sources":["components/ExpNo2/testPage2.js"],"sourcesContent":["\r\n\r\nimport React from 'react'\r\nimport { Button, Card, Form, Modal, Radio, Space, Typography } from \"antd\";\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport { AiOutlineCheckCircle } from 'react-icons/ai'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Questions from '../ExpNo2/questions.json';\r\nconst TestPage2 = () => {\r\n\r\n    const [form] = Form.useForm();\r\n    const [modal, contextHolder] = Modal.useModal();\r\n    const navigate = useNavigate();\r\n    const confirm = (saveAnswersFunc, unAnsweredQuestions) => {\r\n        modal.confirm({\r\n            direction: 'rtl',\r\n            title: 'تنبيه',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content:\r\n                <>\r\n                    {\r\n                        unAnsweredQuestions === 0 ?\r\n                            <div className='font-semibold' >عند تأكيد هذا الاجراء سيتم انهاء الاختبار و الانتقال الى صفحة النتيجة</div> :\r\n                            unAnsweredQuestions === 1 ?\r\n                                <div className='font-semibold' >لديك سؤال لم تقم بالاجابة عليه و عند تأكيد هذا الاجراء سيتم إنهاء الاختبار و الانتقال الى صفحة النتيجة</div> :\r\n                                unAnsweredQuestions === 2 ?\r\n                                    <div className='font-semibold' >لديك سؤالين لم تقم بالاجابة عليهما و عند تأكيد هذا الاجراء سيتم إنهاء الاختبار و الانتقال الى صفحة النتيجة</div> :\r\n                                    <div className='font-semibold' >لديك ({unAnsweredQuestions}) اسئلة لم تقم بالاجابة عليها و عند تأكيد هذا الاجراء سيتم إنهاء الاختبار و الانتقال الى صفحة النتيجة</div>\r\n                    }\r\n                </>,\r\n            okText: 'تأكيد',\r\n            cancelText: 'إلغاء',\r\n            okButtonProps: { type: 'primary', danger: true },\r\n            onOk: () => {\r\n                saveAnswersFunc();\r\n                navigate(\"/result2\");\r\n            },\r\n            bodyStyle: { background: '#F1F1F2', margin: 0 },\r\n            cancelButtonProps:{style:{background:'#F1F1F2'}},\r\n        });\r\n    };\r\n\r\n    const handleFinish = async (choices) => {\r\n        let unAnsweredQ = 0;\r\n        let resultArray = [];\r\n        Questions.forEach((item, i) => {\r\n            if (choices[`answer${i + 1}`] !== undefined) {\r\n                item.userAnswerIdx = i;\r\n                if (item.correctAnswerIdx === item.userAnswerIdx) {\r\n                    item.status = true;\r\n                } else {\r\n                    item.status = false;\r\n                }\r\n            } else {\r\n                unAnsweredQ = unAnsweredQ + 1;\r\n                item.userAnswerIdx = null;\r\n                item.status = null;\r\n            }\r\n            resultArray.push(item);\r\n        })\r\n        confirm(() => localStorage.setItem('result2', JSON.stringify(resultArray)), unAnsweredQ)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {contextHolder}\r\n            <Form\r\n                name=\"testPage\"\r\n                form={form}\r\n                layout=\"vertical\"\r\n                onFinish={handleFinish}\r\n\r\n            >\r\n                <div>\r\n                    {\r\n                        Questions.map((item, i) => {\r\n                            return (\r\n                                <section\r\n                                    className='animate__animated animate__slideInUp'\r\n                                    key={i + 1}\r\n                                    style={{ background: '#398AB9', paddingTop: 6, paddingRight: 6, borderRadius: 12, marginTop: 20 }}>\r\n                                    <Card style={{ width: '80vw', background: \"#F1F1F2\" }} bordered={false} title={`السؤال ${i + 1}`}>\r\n                                        <Space direction=\"vertical\">\r\n                                            <Typography.Paragraph strong style={{ fontSize: 17 }} >\r\n                                                {\r\n                                                    item.question\r\n                                                }\r\n                                                ؟\r\n                                            </Typography.Paragraph>\r\n                                        </Space>\r\n                                        <Form.Item\r\n                                            name={`answer${i + 1}`}\r\n                                        >\r\n                                            <Radio.Group>\r\n                                                <Space direction=\"vertical\" >\r\n                                                    {\r\n                                                        item.answers.map((answer, j) => (\r\n                                                            <Radio\r\n                                                                key={j + 1}\r\n                                                                value={answer}\r\n                                                                style={{ fontSize: 17 }}\r\n                                                            >\r\n                                                                {answer}\r\n                                                            </Radio>\r\n                                                        ))\r\n                                                    }\r\n                                                </Space>\r\n                                            </Radio.Group>\r\n                                        </Form.Item>\r\n                                    </Card>\r\n                                </section>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                {/* <FloatButton type='primary' icon={<SaveOutlined />} onClick={() => console.log('click')} /> */}\r\n                <div className=' absolute left-0 right-0 bottom-10 ' >\r\n                    <Button\r\n                        size='large'\r\n                        type='primary'\r\n                        shape='circle'\r\n                        htmlType='submit'\r\n                        className='text-white animate__animated animate__slideInLeft'\r\n                        style={{\r\n                            position: 'sticky',\r\n                            backgroundColor: 'rgba(139,61,255,0.8)',\r\n                            bottom: 0,\r\n                            right: '95vw',\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center'\r\n                        }}\r\n                        icon={<AiOutlineCheckCircle size={'large'} />}\r\n                    />\r\n                </div>\r\n            </Form >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestPage2;"],"names":["Form","form","Modal","modal","contextHolder","navigate","useNavigate","confirm","saveAnswersFunc","unAnsweredQuestions","direction","title","icon","ExclamationCircleOutlined","content","className","okText","cancelText","okButtonProps","type","danger","onOk","bodyStyle","background","margin","cancelButtonProps","style","handleFinish","choices","unAnsweredQ","resultArray","Questions","item","i","undefined","userAnswerIdx","correctAnswerIdx","status","push","localStorage","setItem","JSON","stringify","name","layout","onFinish","paddingTop","paddingRight","borderRadius","marginTop","width","bordered","strong","fontSize","question","answers","map","answer","j","value","size","shape","htmlType","position","backgroundColor","bottom","right","display","justifyContent","alignItems"],"sourceRoot":""}