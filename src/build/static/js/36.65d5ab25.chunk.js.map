{"version":3,"file":"static/js/36.65d5ab25.chunk.js","mappings":"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","sources":["store/index.js","components/ExpNo2/sidebar2.js","webpack://electrical-circuit-simulator/./src/style/style.module.css?5de5","components/ExpNo2/Elements/capacitor.js","components/ExpNo2/Elements/DCSource.js","components/ExpNo2/Elements/dSwitch.js","components/ExpNo2/Elements/lamp.js","assets/svgIcons.js","components/ExpNo2/Elements/Galvanometer.js","components/ExpNo2/Elements/resistor.js","components/CommonElements/CustomConnectionLine.js","components/ExpNo2/workspace2.js"],"sourcesContent":["\r\nimport { create } from \"zustand\";\r\n\r\nexport const GlobalStore = create((set) =>\r\n({\r\n    volt: '0.00 v',\r\n    setVolt: (volt) => set({ volt }),\r\n\r\n    // onLed: 'bulb',\r\n    // setOnLed: (onLed) => set({ onLed }),\r\n\r\n    onSwitchKey: () => { },\r\n    setOnSwitchKey: (onSwitchKey) => set({ onSwitchKey }),\r\n}))\r\n\r\nexport const ExpSB2store = create((set) => ({\r\n    Capacitor: JSON.parse(sessionStorage.getItem('Capacitor')) ?? false,\r\n    setCapacitor: (Capacitor) => set({ Capacitor }),\r\n\r\n    DCSource: JSON.parse(sessionStorage.getItem('DCSource')) ?? false,\r\n    setDCSource: (DCSource) => set({ DCSource }),\r\n\r\n    DSwitch: JSON.parse(sessionStorage.getItem('DSwitch')) ?? false,\r\n    setDSwitch: (DSwitch) => set({ DSwitch }),\r\n\r\n    Lamp: JSON.parse(sessionStorage.getItem('Lamp')) ?? false,\r\n    setLamp: (Lamp) => set({ Lamp }),\r\n\r\n    Resistor: JSON.parse(sessionStorage.getItem('Resistor')) ?? false,\r\n    setResistor: (Resistor) => set({ Resistor }),\r\n\r\n    Galvanometer: JSON.parse(sessionStorage.getItem('Galvanometer')) ?? false,\r\n    setGalvanometer: (Galvanometer) => set({ Galvanometer }),\r\n\r\n    Run: false,\r\n    setRun: (Run) => set({ Run }),\r\n\r\n    RunError: false,\r\n    setRunError: (RunError) => set({ RunError }),\r\n\r\n\r\n}));","import React from 'react';\r\nimport ResistorIco from '../../assets/images/resistor.png'\r\nimport LampIco from '../../assets/images/lamp.png'\r\nimport battery from '../../assets/images/battery.png';\r\nimport dSwitch from '../../assets/images/openKey2.png';\r\nimport galvanometerIco from '../../assets/images/galvanometer.png';\r\nimport capacitor from '../../assets/images/capacity/0.png';\r\nimport { ExpSB2store } from '../../store';\r\nimport { Tooltip } from 'antd';\r\n\r\n\r\nexport const ExpSB2 = () => {\r\n    let sidebarElement = 'w-14 h-14 flex flex-col justify-center items-center text-sm font-bold cursor-pointer '\r\n    const onDragStart = (event, nodeType) => {\r\n        event.dataTransfer.setData('data', nodeType);\r\n        event.dataTransfer.effectAllowed = 'move';\r\n    };\r\n\r\n    const { Capacitor, Resistor, Lamp, DSwitch, DCSource, Galvanometer } = ExpSB2store();\r\n\r\n    return (\r\n        <>\r\n            <Tooltip color={'rgba(0,0,0,0.5)'} placement='left' title={'مفتاح مزدوج'} >\r\n                <div\r\n                    style={{ marginBottom: '30px', marginTop: '30px' }}\r\n                    className={DSwitch ? `cursor-not-allowed opacity-50 ${sidebarElement} ` : sidebarElement}\r\n                >\r\n                    <div draggable={!DSwitch} onDragStart={(event) => {\r\n                        onDragStart(event, 'DSwitch')\r\n                    }}>\r\n                        <img alt='' draggable={false} src={dSwitch} />\r\n                    </div>\r\n                    <span className=\"mt-1\" >Switch</span>\r\n                </div>\r\n            </Tooltip>\r\n\r\n            <Tooltip color={'rgba(0,0,0,0.5)'} placement='left' title={'متسعة'} >\r\n                <div\r\n                    style={{ marginBottom: '30px', marginTop: '30px' }}\r\n                    className={Capacitor ? `cursor-not-allowed opacity-50 ${sidebarElement}` : sidebarElement}\r\n                >\r\n                    <div draggable={!Capacitor} onDragStart={(event) => {\r\n                        onDragStart(event, 'Capacitor')\r\n                    }} >\r\n                        <img alt='' draggable={false} src={capacitor} />\r\n                    </div>\r\n                    <span className=\"mt-1\" >Capacitor</span>\r\n                </div>\r\n            </Tooltip>\r\n\r\n            <Tooltip color={'rgba(0,0,0,0.5)'} placement='left' title={'بطارية'} >\r\n                <div\r\n                    style={{ marginBottom: '30px', marginTop: '30px' }}\r\n                    className={DCSource ? `cursor-not-allowed opacity-50 ${sidebarElement}` : sidebarElement}\r\n                >\r\n                    <div draggable={!DCSource} onDragStart={(event) => {\r\n                        onDragStart(event, 'DCSource')\r\n                    }} >\r\n                        <img alt='' draggable={false} src={battery} />\r\n                    </div>\r\n                    <span className=\"mt-1\" >Battery</span>\r\n                </div>\r\n            </Tooltip>\r\n\r\n            <Tooltip color={'rgba(0,0,0,0.5)'} placement='left' title={'مقاومة'} >\r\n                <div\r\n                    style={{ marginBottom: '30px', marginTop: '30px' }}\r\n                    className={Resistor ? `cursor-not-allowed opacity-50 ${sidebarElement}` : sidebarElement}\r\n                >\r\n                    <div draggable={!Resistor} onDragStart={(event) => {\r\n                        onDragStart(event, 'Resistor')\r\n                    }} >\r\n                        <img alt='' draggable={false} src={ResistorIco} />\r\n                    </div>\r\n                    <span className=\"mt-1\" >Resistor</span>\r\n                </div>\r\n            </Tooltip>\r\n\r\n            <Tooltip color={'rgba(0,0,0,0.5)'} placement='left' title={'مصباح'} >\r\n                <div\r\n                    style={{ marginBottom: '30px', marginTop: '30px' }}\r\n                    className={Lamp ? `cursor-not-allowed opacity-50 ${sidebarElement}` : sidebarElement}\r\n                >\r\n                    <div draggable={!Lamp} onDragStart={(event) => {\r\n                        onDragStart(event, 'Lamp')\r\n                    }} >\r\n                        <img style={{ height: 80, width: 55 }} alt='' draggable={false} src={LampIco} />\r\n                    </div>\r\n                    <span className=\"mt-1\" >Lamp</span>\r\n                </div>\r\n            </Tooltip>\r\n\r\n            <Tooltip color={'rgba(0,0,0,0.5)'} placement='left' title={'كلفانوميتر'} >\r\n                <div\r\n                    style={{ marginBottom: '30px', marginTop: '30px' }}\r\n                    className={Galvanometer ? `cursor-not-allowed opacity-50 ${sidebarElement}` : sidebarElement}\r\n                >\r\n                    <div draggable={!Galvanometer} onDragStart={(event) => {\r\n                        onDragStart(event, 'Galvanometer')\r\n                    }} >\r\n                        <img alt='' draggable={false} src={galvanometerIco} />\r\n                    </div>\r\n                    <span className=\"mt-1\" >Galvanometer</span>\r\n                </div>\r\n            </Tooltip>\r\n        </>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"node\":\"style_node__oBab2\",\"rotateHandle\":\"style_rotateHandle__X4Jdv\"};","import { Image } from \"antd\";\r\n// import capacitance from \"../../assets/images/capacitance.png\";\r\nimport React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { Handle, useUpdateNodeInternals } from 'reactflow';\r\nimport { drag } from 'd3-drag';\r\nimport { select } from 'd3-selection';\r\n\r\nimport styles from '../../../style/style.module.css';\r\nimport switchCueArrow from \"../../../assets/images/switchCueArrow.png\";\r\nimport capacity0 from \"../../../assets/images/capacity/0.png\";\r\nimport capacity1 from \"../../../assets/images/capacity/1.png\";\r\nimport capacity2 from \"../../../assets/images/capacity/2.png\";\r\nimport capacity3 from \"../../../assets/images/capacity/3.png\";\r\nimport capacity4 from \"../../../assets/images/capacity/4.png\";\r\nimport capacity5 from \"../../../assets/images/capacity/5.png\";\r\nimport capacity6 from \"../../../assets/images/capacity/6.png\";\r\nimport capacity7 from \"../../../assets/images/capacity/7.png\";\r\nimport capacity8 from \"../../../assets/images/capacity/8.png\";\r\nimport capacity9 from \"../../../assets/images/capacity/9.png\";\r\nimport capacity10 from \"../../../assets/images/capacity/10.png\";\r\nconst capacitance = {\r\n    capacity0,\r\n    capacity1,\r\n    capacity2,\r\n    capacity3,\r\n    capacity4,\r\n    capacity5,\r\n    capacity6,\r\n    capacity7,\r\n    capacity8,\r\n    capacity9,\r\n    capacity10,\r\n\r\n}\r\nfunction Capacitor({\r\n    id,\r\n    // isConnectable\r\n    data\r\n}) {\r\n    const [capacity, setCapacity] = useState(capacitance.capacity0)\r\n    const rotateControlRef = useRef(null);\r\n    const updateNodeInternals = useUpdateNodeInternals();\r\n    const [rotation, setRotation] = useState(0);\r\n    const { num } = data \r\n    useEffect(() => {\r\n        if (!rotateControlRef.current) {\r\n            return;\r\n        }\r\n        if (num) {\r\n            setCapacity(capacitance[`capacity${num}`])\r\n\r\n        } else {\r\n            setCapacity(capacitance.capacity0)\r\n        }\r\n\r\n        const selection = select(rotateControlRef.current);\r\n        const dragHandler = drag().on('drag', (evt) => {\r\n            const dx = evt.x - 100;\r\n            const dy = evt.y - 100;\r\n            const rad = Math.atan2(dx, dy);\r\n            const deg = rad * (180 / Math.PI);\r\n            setRotation(180 - deg);\r\n            updateNodeInternals(id);\r\n        });\r\n\r\n        selection.call(dragHandler);\r\n    }, [id, num, updateNodeInternals]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    transform: `rotate(${rotation}deg)`,\r\n                }}\r\n                className={styles.node}\r\n            >\r\n\r\n                <div\r\n                    ref={rotateControlRef}\r\n                    style={{\r\n                        display: 'block',\r\n                    }}\r\n                    className={`nodrag ${styles.rotateHandle}`}\r\n                >\r\n                    <Image preview={false} src={switchCueArrow} />\r\n                </div>\r\n                <div\r\n                    style={{ width: \"75px\" }}\r\n                    className=\" flex items-center justify-center \"\r\n                >\r\n                    <Handle\r\n                        id='cS'\r\n                        style={{ background: 'red' }}\r\n                        className=\"mr-1 z-50 \" type=\"source\" position=\"right\" />\r\n                    <Handle\r\n                        id=\"cT\"\r\n                        style={{ background: 'blue' }}\r\n                        className=\"ml-1 z-50 \" type=\"target\" position=\"left\" />\r\n                    <Image preview={false} src={capacity} className=\"z-50 \" />\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(Capacitor);\r\n","\r\n\r\nimport { Image } from \"antd\";\r\n\r\nimport battery from \"../../../assets/images/battery.png\";\r\n\r\nimport React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { Handle, useUpdateNodeInternals } from 'reactflow';\r\nimport { drag } from 'd3-drag';\r\nimport { select } from 'd3-selection';\r\n\r\nimport styles from '../../../style/style.module.css';\r\nimport switchCueArrow from \"../../../assets/images/switchCueArrow.png\";\r\n\r\nfunction DCSource({\r\n    id,\r\n    // isConnectable\r\n}) {\r\n    const rotateControlRef = useRef(null);\r\n    const updateNodeInternals = useUpdateNodeInternals();\r\n    const [rotation, setRotation] = useState(0);\r\n    useEffect(() => {\r\n        if (!rotateControlRef.current) {\r\n            return;\r\n        }\r\n\r\n        const selection = select(rotateControlRef.current);\r\n        const dragHandler = drag().on('drag', (evt) => {\r\n            const dx = evt.x - 100;\r\n            const dy = evt.y - 100;\r\n            const rad = Math.atan2(dx, dy);\r\n            const deg = rad * (180 / Math.PI);\r\n            setRotation(180 - deg);\r\n            updateNodeInternals(id);\r\n        });\r\n\r\n        selection.call(dragHandler);\r\n    }, [id, updateNodeInternals]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    transform: `rotate(${rotation}deg)`,\r\n                }}\r\n                className={styles.node}\r\n            >\r\n\r\n                <div\r\n                    ref={rotateControlRef}\r\n                    style={{\r\n                        display: 'block',\r\n                    }}\r\n                    className={`nodrag ${styles.rotateHandle}`}\r\n                >\r\n                    <Image preview={false} src={switchCueArrow} />\r\n                </div>\r\n                <div\r\n                    style={{ width: \"50px\" }}\r\n                    className=\" flex items-center justify-center \"\r\n                >\r\n                    <Handle\r\n                        id=\"dcT\"\r\n                        style={{ background: 'blue' }}\r\n                        className=\" z-50 \" type=\"target\" position=\"right\" />\r\n                    <Handle\r\n                        id=\"dcS\"\r\n                        style={{ background: 'red' }}\r\n                        className=\" z-50 \" type=\"source\" position=\"left\" />\r\n                    <Image preview={false} src={battery} className=\"\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default memo(DCSource);\r\n\r\n","import React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { Handle, useUpdateNodeInternals } from 'reactflow';\r\nimport { drag } from 'd3-drag';\r\nimport { select } from 'd3-selection';\r\n\r\nimport styles from '../../../style/style.module.css';\r\nimport { Image } from 'antd';\r\nimport switchCueArrow from \"../../../assets/images/switchCueArrow.png\";\r\nimport openKey1 from \"../../../assets/images/openKey1.png\";\r\nimport openKey2 from \"../../../assets/images/openKey2.png\";\r\nimport { ExpSB2store } from '../../../store';\r\nfunction DSwitch({\r\n    id,\r\n    isConnectable,\r\n    data\r\n}) {\r\n    const { Run, setRunError } = ExpSB2store();\r\n    const { onRunningOpenKey1, onRunningOpenKey2 } = data\r\n    const [keyOpenClose, setKeyOpenClose] = useState(openKey2);\r\n    const rotateControlRef = useRef(null);\r\n    const updateNodeInternals = useUpdateNodeInternals();\r\n    const [rotation, setRotation] = useState(0);\r\n    useEffect(() => {\r\n        if (!rotateControlRef.current) {\r\n            return;\r\n        }\r\n        const selection = select(rotateControlRef.current);\r\n        const dragHandler = drag().on('drag', (evt) => {\r\n            const dx = evt.x - 100;\r\n            const dy = evt.y - 100;\r\n            const rad = Math.atan2(dx, dy);\r\n            const deg = rad * (180 / Math.PI);\r\n            setRotation(180 - deg);\r\n            updateNodeInternals(id);\r\n        });\r\n\r\n        selection.call(dragHandler);\r\n    }, [id, updateNodeInternals, onRunningOpenKey1, onRunningOpenKey2]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    transform: `rotate(${rotation}deg)`,\r\n                }}\r\n                className={styles.node}\r\n            >\r\n\r\n                <div\r\n                    ref={rotateControlRef}\r\n                    style={{\r\n                        display: 'block',\r\n                    }}\r\n                    className={`nodrag ${styles.rotateHandle}`}\r\n                >\r\n                    <Image preview={false} src={switchCueArrow} />\r\n                </div>\r\n                <div\r\n                    style={{ width: \"50px\" }}\r\n                    className=\" flex items-center justify-center switchKey \"\r\n                    onClick={() => {\r\n                        if (Run) {\r\n                            if (keyOpenClose === openKey1) {\r\n                                setKeyOpenClose(openKey2);\r\n                                onRunningOpenKey2()\r\n                            } else {\r\n                                setKeyOpenClose(openKey1);\r\n                                onRunningOpenKey1()\r\n                            }\r\n                        } else {\r\n                            setRunError(true)\r\n                        }\r\n\r\n\r\n                    }}\r\n\r\n                >\r\n                    <Handle\r\n                        id='dsMiddle'\r\n                        style={{\r\n                            marginLeft: '5px',\r\n                            background: 'blue'\r\n                        }}\r\n                        isConnectable={isConnectable} className=\"ml-1 z-50 \" type=\"target\" position=\"left\" />\r\n                    <Handle\r\n                        id=\"dsTop\"\r\n                        style={{\r\n                            marginTop: '-14px',\r\n                            marginRight: '5.5px', background: 'red'\r\n                        }}\r\n                        isConnectable={isConnectable}\r\n                        className=\" z-50\" type=\"source\" position=\"right\" />\r\n                    <Handle\r\n                        id=\"dsBottom\"\r\n                        style={{\r\n                            marginTop: '14px',\r\n                            marginRight: '5.5px',\r\n                            background: 'red'\r\n                        }}\r\n                        isConnectable={isConnectable}\r\n                        className=\"z-50 \" type=\"source\" position=\"right\" />\r\n                    <Image preview={false} src={keyOpenClose} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default memo(DSwitch);","\r\nimport React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { Handle, useUpdateNodeInternals } from 'reactflow';\r\nimport { drag } from 'd3-drag';\r\nimport { select } from 'd3-selection';\r\nimport styles from '../../../style/style.module.css';\r\nimport switchCueArrow from \"../../../assets/images/switchCueArrow.png\";\r\nimport '../../../style/led.css'\r\nimport { Image } from 'antd';\r\n\r\nfunction Lamp({\r\n    id,\r\n    data\r\n    // isConnectable\r\n}) {\r\n    const { onLed } = data\r\n    const [led, setLed] = useState('bulb1')\r\n    useEffect(() => {\r\n        let first = true\r\n        if (first) {\r\n            if (onLed === 'on') {\r\n                setLed('bulb')\r\n            }\r\n            else {\r\n                setLed('bulb1')\r\n            }\r\n        }\r\n        return () => {\r\n            first = false\r\n        }\r\n    }, [onLed])\r\n\r\n\r\n\r\n    const rotateControlRef = useRef(null);\r\n    const updateNodeInternals = useUpdateNodeInternals();\r\n    const [rotation, setRotation] = useState(90);\r\n    useEffect(() => {\r\n        if (!rotateControlRef.current) {\r\n            return;\r\n        }\r\n\r\n        const selection = select(rotateControlRef.current);\r\n        const dragHandler = drag().on('drag', (evt) => {\r\n            const dx = evt.x - 100;\r\n            const dy = evt.y - 100;\r\n            const rad = Math.atan2(dx, dy);\r\n            const deg = rad * (180 / Math.PI);\r\n            setRotation(180 - deg);\r\n            updateNodeInternals(id);\r\n        });\r\n\r\n        selection.call(dragHandler);\r\n    }, [id, updateNodeInternals]);\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    transform: `rotate(${rotation}deg)`,\r\n                }}\r\n                className={styles.node}\r\n            >\r\n                <div\r\n                    ref={rotateControlRef}\r\n                    style={{\r\n                        display: 'block',\r\n                        marginTop: 30\r\n                    }}\r\n                    className={`nodrag ${styles.rotateHandle}`}\r\n\r\n                >\r\n                    <Image preview={false} src={switchCueArrow} />\r\n                </div>\r\n                <div>\r\n                    <Handle\r\n                        id=\"lT\"\r\n                        type=\"target\"\r\n                        position=\"right\"\r\n                        style={{\r\n                            background: 'blue',\r\n                            zIndex: 50, \r\n                            marginTop:-8,\r\n                            marginRight:7,\r\n                        }}\r\n                    />\r\n                    <Handle\r\n                        id=\"lS\"\r\n                        type=\"source\"\r\n                        position=\"right\"\r\n                        style={{\r\n                            background: 'red',\r\n                            zIndex: 50,\r\n                            marginRight:-3,\r\n                        }}\r\n                    />\r\n                    <div className=\"light rotate-90 scale-50\">\r\n                        <div className={led}>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default memo(Lamp);\r\n","/* eslint-disable react/jsx-no-comment-textnodes */\r\n\r\nexport const DSwitchIco = (props) => (\r\n    <svg style={{ height: '100%', width: '100%' }} >\r\n        <circle cx={'30%'} cy={'50%'} r={2} fill=\"black\" />\r\n        <circle cx={'70%'} cy={'75%'} r={2} fill=\"black\" />\r\n        <circle cx={'70%'} cy={'25%'} r={2} fill=\"black\" />\r\n        <line x1={0} y1={'50%'} x2={'30%'} y2={'50%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n        <line x1={'30%'} y1={'50%'} x2={'70%'} y2={props.switchState === 2 ? '75%' : '25%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n        <line x1={'70%'} y1={'25%'} x2={'100%'} y2={'25%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n        <line x1={'70%'} y1={'75%'} x2={'100%'} y2={'75%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n    </svg>\r\n)\r\n\r\nexport const CapacitorIco = (props) => (\r\n    <svg style={{ height: '100%', width: '100%' }} >\r\n        <line x1={0} y1={'50%'} x2={'30%'} y2={'50%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n        <line x1={'30%'} y1={'10%'} x2={'30%'} y2={'90%'} style={{ stroke: 'black', strokeWidth: 2 }} />\r\n        {\r\n            props.insulator ? props.insulator > 1 ? (\r\n                <line x1={'50%'} y1={'10%'} x2={'50%'} y2={'90%'} style={{ stroke: 'rgb(180,180,180)', strokeWidth: 10 }} />\r\n            ) : null : null\r\n        }\r\n        <line x1={'70%'} y1={'50%'} x2={'100%'} y2={'50%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n        <line x1={'70%'} y1={'10%'} x2={'70%'} y2={'90%'} style={{ stroke: 'black', strokeWidth: 2 }} />\r\n    </svg>\r\n)\r\n\r\nexport const DCSourceIco = (props) => (\r\n    <svg style={{ height: '100%', width: '100%' }} >\r\n        <line x1={0} y1={'50%'} x2={'30%'} y2={'50%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n        <line x1={'30%'} y1={'10%'} x2={'30%'} y2={'90%'} style={{ stroke: 'black', strokeWidth: 2 }} />\r\n        <line x1={'70%'} y1={'50%'} x2={'100%'} y2={'50%'} style={{ stroke: 'black', strokeWidth: 1 }} />\r\n        <line x1={'70%'} y1={'25%'} x2={'70%'} y2={'75%'} style={{ stroke: 'black', strokeWidth: 2 }} />\r\n    </svg>\r\n)\r\n\r\nexport const LampIco = (props) => (\r\n    <svg style={{ height: '100%', width: '100%' }} >\r\n        <circle cx={'50%'} cy={'50%'} r={15} stroke={'black'} strokeWidth={0.5} fill=\"rgb(230,230,230)\" />\r\n    </svg>\r\n)\r\n\r\n\r\nexport const GalvanometerIco = ({ direction }) => {\r\n    \r\n    const Middle = () => (<line x1={'50%'} y1={'35%'} x2={'50%'} y2={'50%'} markerStart=\"url(#arrow)\" style={{ stroke: 'red', strokeWidth: 1.3 }} />)\r\n\r\n    const Right = () => (<line x1=\"65%\" y1=\"44%\" x2=\"38%\" y2=\"60%\" markerStart=\"url(#arrow)\" style={{ stroke: 'red', strokeWidth: 1.3 }} ></line>)\r\n\r\n    const Left = () => (<line x1=\"35%\" y1=\"44%\" x2=\"62%\" y2=\"60%\" markerStart=\"url(#arrow)\" style={{ stroke: 'red', strokeWidth: 1.3 }} ></line>)\r\n\r\n    return (\r\n        <svg style={{ height: '100%', width: '100%' }} >\r\n            <defs>\r\n                <marker id=\"arrow\" markerWidth=\"5\" markerHeight=\"7\"\r\n                    refX=\"5\" refY=\"3.5\" orient=\"auto\">\r\n                    <polygon points=\"10 0, 10 7, 0 3.5\" fill=\"red\" />\r\n                </marker>\r\n            </defs>\r\n            //x1 + 5 , y1+3 for rotate right\r\n            //x1 - 5 , y1+3 for rotate left\r\n            <circle cx={'50%'} cy={'50%'} r={'40%'} fill=\"#CFD8DC\" />\r\n\r\n            {direction === 0 && <Middle />}\r\n            {direction === 1 && <Right />}\r\n            {direction === -1 && <Left />}\r\n\r\n            <circle cx={'50%'} cy={'53%'} r={3} fill=\"#cfd8dc\" strokeWidth={1.7} stroke=\"#263238\" />\r\n        </svg>\r\n    )\r\n}","/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport { Image } from \"antd\";\r\nimport galvanometerImg from \"../../../assets/images/GalvanometerIco.png\";\r\n\r\nimport React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { Handle, useUpdateNodeInternals } from 'reactflow';\r\nimport { drag } from 'd3-drag';\r\nimport { select } from 'd3-selection';\r\n\r\nimport styles from '../../../style/style.module.css';\r\nimport switchCueArrow from \"../../../assets/images/switchCueArrow.png\";\r\nimport { GalvanometerIco } from \"../../../assets/svgIcons\";\r\n\r\nfunction Galvanometer({\r\n    id,\r\n    // isConnectable\r\n    data\r\n}) {\r\n    const rotateControlRef = useRef(null);\r\n    const updateNodeInternals = useUpdateNodeInternals();\r\n    const [rotation, setRotation] = useState(0);\r\n    const { direction } = data \r\n     useEffect(() => {\r\n        if (!rotateControlRef.current) {\r\n            return;\r\n        }\r\n\r\n        const selection = select(rotateControlRef.current);\r\n        const dragHandler = drag().on('drag', (evt) => {\r\n            const dx = evt.x - 100;\r\n            const dy = evt.y - 100;\r\n            const rad = Math.atan2(dx, dy);\r\n            const deg = rad * (180 / Math.PI);\r\n            setRotation(180 - deg);\r\n            updateNodeInternals(id);\r\n        });\r\n\r\n        selection.call(dragHandler);\r\n    }, [id, updateNodeInternals, direction]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    transform: `rotate(${rotation}deg)`,\r\n                }}\r\n                className={styles.node}\r\n            >\r\n                <div\r\n                    ref={rotateControlRef}\r\n                    style={{\r\n                        display: 'block',\r\n                    }}\r\n                    className={`nodrag ${styles.rotateHandle}`}\r\n                >\r\n                    <Image preview={false} src={switchCueArrow} />\r\n                </div>\r\n                <Handle\r\n                    id=\"gS\"\r\n                    style={{ height: 6, width: 6, background: 'red', borderColor: 'red', marginLeft: 21.2, marginBottom: 17 }}\r\n                    className=\" z-50 \" type=\"source\" position=\"bottom\" />\r\n                <Handle\r\n                    id=\"gT\"\r\n                    style={{ height: 6, width: 6, background: 'blue', borderColor: 'blue', marginLeft: -21.2, marginBottom: 17 }}\r\n                    className=\" z-50 \" type=\"target\" position=\"bottom\" />\r\n                <div className=\" w-20 h-20  \" >\r\n                    <GalvanometerIco direction={direction ?? 0} />\r\n                    <img\r\n                        src={galvanometerImg}\r\n                        alt=\"Overlay Image\"\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                            bottom: 0\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(Galvanometer);\r\n\r\n","\r\n\r\nimport { Image } from \"antd\";\r\n\r\nimport resistor from \"../../../assets/images/resistor.png\";\r\n\r\nimport React, { useEffect, useState, useRef, memo } from 'react';\r\nimport { Handle, useUpdateNodeInternals } from 'reactflow';\r\nimport { drag } from 'd3-drag';\r\nimport { select } from 'd3-selection';\r\n\r\nimport styles from '../../../style/style.module.css';\r\nimport switchCueArrow from \"../../../assets/images/switchCueArrow.png\";\r\n\r\nfunction Resistor({\r\n    id,\r\n    // isConnectable\r\n}) {\r\n    const rotateControlRef = useRef(null);\r\n    const updateNodeInternals = useUpdateNodeInternals();\r\n    const [rotation, setRotation] = useState(0);\r\n    useEffect(() => {\r\n        if (!rotateControlRef.current) {\r\n            return;\r\n        }\r\n\r\n        const selection = select(rotateControlRef.current);\r\n        const dragHandler = drag().on('drag', (evt) => {\r\n            const dx = evt.x - 100;\r\n            const dy = evt.y - 100;\r\n            const rad = Math.atan2(dx, dy);\r\n            const deg = rad * (180 / Math.PI);\r\n            setRotation(180 - deg);\r\n            updateNodeInternals(id);\r\n        });\r\n\r\n        selection.call(dragHandler);\r\n    }, [id, updateNodeInternals]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    transform: `rotate(${rotation}deg)`,\r\n                }}\r\n                className={styles.node}\r\n            >\r\n\r\n                <div\r\n                    ref={rotateControlRef}\r\n                    style={{\r\n                        display: 'block',\r\n                    }}\r\n                    className={`nodrag ${styles.rotateHandle}`}\r\n                >\r\n                    <Image preview={false} src={switchCueArrow} />\r\n                </div>\r\n                <div\r\n                    style={{ width: \"70px\" }}\r\n                    className=\" flex items-center justify-center \"\r\n                >\r\n                    <Handle\r\n                        id=\"rT\"\r\n                        style={{ background: 'blue' }}\r\n                        className=\" z-50 \" type=\"target\" position=\"right\" />\r\n                    <Handle\r\n                        id=\"rS\"\r\n                        style={{ background: 'red' }}\r\n                        className=\" z-50 \" type=\"source\" position=\"left\" />\r\n                    <Image preview={false} src={resistor} className=\"\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default memo(Resistor);","import React from 'react';\r\nimport { getStraightPath } from 'reactflow';\r\n\r\nfunction CustomConnectionLine({ fromX, fromY, toX, toY, connectionLineStyle }) {\r\n  const [edgePath] = getStraightPath({\r\n    sourceX: fromX,\r\n    sourceY: fromY,\r\n    targetX: toX,\r\n    targetY: toY,\r\n  });\r\n\r\n  return (\r\n    <g>\r\n      <path style={connectionLineStyle} fill=\"none\" d={edgePath} />\r\n      <circle cx={toX} cy={toY} fill=\"black\" r={3} stroke=\"black\" strokeWidth={1.5} />\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default CustomConnectionLine;","/* eslint-disable eqeqeq */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useCallback, useState } from 'react';\r\nimport 'reactflow/dist/style.css';\r\nimport '../../style/workspaceStyle.css';\r\nimport { GrNotes, GrPowerReset } from 'react-icons/gr'\r\nimport { BsFillPlayFill, BsStopFill } from 'react-icons/bs'\r\nimport {\r\n    Controls,\r\n    ReactFlow,\r\n    useEdgesState,\r\n    useNodesState,\r\n    ReactFlowProvider,\r\n    addEdge,\r\n    updateEdge,\r\n    ControlButton,\r\n} from 'reactflow';\r\nimport { ExpSB2 } from './sidebar2';\r\nimport { ExpSB2store } from '../../store/index';\r\nimport { Button, message, Modal, Popconfirm, Typography } from 'antd';\r\nimport { WarningOutlined } from '@ant-design/icons';\r\nimport Capacitor from './Elements/capacitor';\r\nimport DCSource from './Elements/DCSource';\r\nimport DSwitch from './Elements/dSwitch';\r\nimport Lamp from './Elements/lamp';\r\nimport Galvanometer from './Elements/Galvanometer';\r\nimport Resistor from './Elements/resistor';\r\nimport { AvatarLogo } from '../layout/AvatarLogo';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CustomConnectionLine from '../CommonElements/CustomConnectionLine';\r\n\r\nconst nodeTypes = {\r\n    DSwitch: DSwitch,\r\n    Lamp: Lamp,\r\n    DCSource: DCSource,\r\n    Capacitor: Capacitor,\r\n    Resistor: Resistor,\r\n    Galvanometer: Galvanometer\r\n};\r\n\r\nlet intervalID;\r\nfunction startInterval({ onHandled, time }) {\r\n    intervalID = setInterval(onHandled, time);\r\n}\r\n\r\nfunction stopClearInterval() {\r\n    clearInterval(intervalID);\r\n}\r\n\r\nconst Workspace2 = () => {\r\n\r\n    const [messageApi, contextHolder] = message.useMessage();\r\n    const Message = ({ type, content }) => {\r\n        messageApi.open({\r\n            type: type,\r\n            content: content,\r\n            style: {\r\n                marginTop: '65px',\r\n                direction: 'rtl'\r\n            },\r\n        });\r\n    };\r\n    const reactFlowWrapper = useRef(null);\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(Object.assign(\r\n        [],\r\n        JSON.parse(sessionStorage.getItem('nodes'))) ?? []);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(Object.assign(\r\n        [],\r\n        JSON.parse(sessionStorage.getItem('edges'))) ?? []);\r\n    const [lampId, setLampId] = useState(0);\r\n    const [chargingCircuit, setChargingCircuit] = useState(parseInt(sessionStorage.getItem('chargingCircuit') ?? 0));\r\n    const lampsId = useRef([\r\n        {\r\n            id: 'lampId0',\r\n            status: false\r\n        },\r\n        {\r\n            id: 'lampId1',\r\n            status: false\r\n        }\r\n    ])\r\n    const chargingCircuitsPossibility = [\r\n        [\r\n            \"cS_dsMiddle\",\r\n            \"gS_cT\",\r\n            \"lS_gT0\",\r\n            \"rS_lT\",\r\n            \"dcS_rT\",\r\n            \"dsBottom_dcT\",\r\n        ],\r\n        [\r\n            \"cS_dsMiddle\",\r\n            \"gS_cT\",\r\n            \"lS_gT1\",\r\n            \"rS_lT\",\r\n            \"dcS_rT\",\r\n            \"dsBottom_dcT\",\r\n        ]\r\n    ]\r\n    const dischargingCircuitsPossibility = [\r\n        [\r\n            \"cS_dsMiddle\",\r\n            \"gS_cT\",\r\n            \"lS_gT1\",\r\n            \"dsTop_lT\",\r\n        ],\r\n        [\r\n            \"cS_dsMiddle\",\r\n            \"gS_cT\",\r\n            \"lS_gT0\",\r\n            \"dsTop_lT\",\r\n        ]\r\n    ]\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const {\r\n        setDSwitch, DSwitch,\r\n        setLamp, Lamp,\r\n        setDCSource, DCSource,\r\n        setCapacitor, Capacitor,\r\n        setResistor, Resistor,\r\n        setGalvanometer, Galvanometer,\r\n        setRun, Run,\r\n        setRunError, RunError\r\n    } = ExpSB2store();\r\n\r\n    const getId = (type) => {\r\n        if (type == 'DSwitch') {\r\n            setDSwitch(true)\r\n            return `switchId1`\r\n        } else if (type == 'Lamp') {\r\n            if (lampId == 0) {\r\n                setLampId(prev => ++prev)\r\n                lampsId.current[0].status = true;\r\n                return `lampId0`\r\n            } else if (lampId == 1) {\r\n                setLamp(true)\r\n                setLampId(prev => ++prev)\r\n                if (lampsId.current[0].status == false) {\r\n                    lampsId.current[0].status = true\r\n                    return `lampId0`\r\n                } else if (lampsId.current[1].status == false) {\r\n                    lampsId.current[1].status = true\r\n                    return `lampId1`\r\n                }\r\n            }\r\n            return\r\n        } else if (type == 'DCSource') {\r\n            setDCSource(true)\r\n            return `sourceId1`\r\n        } else if (type == 'Capacitor') {\r\n            setCapacitor(true)\r\n            return `capacitorId1`\r\n        } else if (type == 'Resistor') {\r\n            setResistor(true)\r\n            return `resistorId1`\r\n        } else if (type == 'Galvanometer') {\r\n            setGalvanometer(true)\r\n            return `galvanometerId1`\r\n        }\r\n    }\r\n\r\n    const onDeleteNode = useCallback((e) => {\r\n        stopProcess()\r\n        if (e[0].type == 'DSwitch') {\r\n            setDSwitch(false)\r\n            return\r\n        } else if (e[0].type == 'Lamp') {\r\n            if (e[0].id == \"lampId0\") {\r\n                lampsId.current[0].status = false;\r\n            }\r\n            if (e[0].id == \"lampId1\") {\r\n                lampsId.current[1].status = false;\r\n            }\r\n            setLampId(prev => --prev);\r\n            setLamp(false)\r\n            return\r\n        } else if (e[0].type == 'DCSource') {\r\n            setDCSource(false)\r\n            return\r\n        } else if (e[0].type == 'Capacitor') {\r\n            setCapacitor(false)\r\n            return\r\n        } else if (e[0].type == 'Resistor') {\r\n            setResistor(false)\r\n            return\r\n        } else if (e[0].type == 'Galvanometer') {\r\n            setGalvanometer(false)\r\n            return\r\n        }\r\n        return\r\n    }, [lampId]);\r\n    const onDragOver = useCallback((event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    }, []);\r\n\r\n    const stopProcess = () => {\r\n        setRun(false)\r\n        stopClearInterval()\r\n        setOnLed('lampId')\r\n        TerminationFun()\r\n        setDirection(0)\r\n\r\n    }\r\n    const onDrop = useCallback(\r\n        (event) => {\r\n            event.preventDefault();\r\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n            const type = event.dataTransfer.getData('data');\r\n\r\n            if (typeof type === 'undefined' || !type) {\r\n                return;\r\n            }\r\n\r\n            const position = reactFlowInstance.project({\r\n                x: event.clientX - reactFlowBounds.left,\r\n                y: event.clientY - reactFlowBounds.top,\r\n            });\r\n            const newNode = {\r\n                id: getId(type),\r\n                type,\r\n                position,\r\n                data: { label: `${type} node` },\r\n            };\r\n\r\n            setNodes((nds) => nds.concat(newNode));\r\n        }, [reactFlowInstance, lampId]);\r\n    const onConnect = useCallback((params) => {\r\n        params.id =\r\n            params.source == 'lampId0' ? params.sourceHandle + \"_\" + params.targetHandle + \"0\"\r\n                : params.source == 'lampId1' ? params.sourceHandle + \"_\" + params.targetHandle + \"1\"\r\n                    : params.sourceHandle + \"_\" + params.targetHandle;\r\n        params.type = 'smoothstep'\r\n        params.style = {\r\n            strokeWidth: 1.5,\r\n            stroke: 'rgba(0,0,0,1)',\r\n        }\r\n        setEdges((eds) => addEdge(params, eds))\r\n        if (params.target == 'lampId0') {\r\n            if (params.source == 'resistorId1') {\r\n                setChargingCircuit(0);\r\n            } else {\r\n                setChargingCircuit(1);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const checkConnections = (edges) => {\r\n        const correctConnections = [\r\n            \"rS_lT\",\r\n            \"gS_cT\",\r\n            \"lS_gT0\",\r\n            \"lS_gT1\",\r\n            \"dcS_rT\",\r\n            \"dsTop_lT\",\r\n            \"dsTop_lT\",\r\n            \"cS_dsMiddle\",\r\n            \"dsBottom_dcT\",\r\n        ]\r\n        let incorrectLinks = edges.filter((edge) => {\r\n            if (!correctConnections.includes(edge.id)) {\r\n                document.getElementById(edge.id).style.stroke = 'red';\r\n                return edge.id\r\n            }\r\n            return null\r\n        })\r\n        return incorrectLinks;\r\n    }\r\n    const [ShowInstructions, setShowInstructions] = useState(false);\r\n    const [onLed, setOnLed] = useState('lampId')\r\n    const [capacity, setCapacity] = useState(0)\r\n    const [direction, setDirection] = useState(0)\r\n    var x = 0\r\n    useEffect(() => {\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === onLed) {\r\n                    node.data = { ...node.data, onLed: 'on' }\r\n                } else {\r\n                    node.data = { ...node.data, onLed: 'off' }\r\n                }\r\n\r\n                if (node.id === 'capacitorId1') {\r\n                    node.data = { ...node.data, num: capacity }\r\n                }\r\n                if (node.id === 'switchId1') {\r\n\r\n                    node.data = {\r\n                        ...node.data, onRunningOpenKey1, onRunningOpenKey2\r\n                    }\r\n                }\r\n                if (node.id === 'galvanometerId1') {\r\n\r\n                    node.data = {\r\n                        ...node.data, direction,\r\n                    }\r\n                }\r\n                return node;\r\n            })\r\n        );\r\n    }, [capacity, onLed, setNodes, Run]);\r\n\r\n    const onRunningOpenKey1 = () => {\r\n        stopClearInterval()\r\n        TerminationFun()\r\n        if (Run) {\r\n            sessionStorage.setItem(\"edges\", JSON.stringify(edges));\r\n            sessionStorage.setItem(\"nodes\", JSON.stringify(nodes));\r\n            sessionStorage.setItem(\"chargingCircuit\", chargingCircuit);\r\n            sessionStorage.setItem(\"Capacitor\", Capacitor);\r\n            sessionStorage.setItem(\"DCSource\", DCSource);\r\n            sessionStorage.setItem(\"DSwitch\", DSwitch);\r\n            sessionStorage.setItem(\"Lamp\", Lamp);\r\n            sessionStorage.setItem(\"Resistor\", Resistor);\r\n            sessionStorage.setItem(\"Galvanometer\", Galvanometer);\r\n            let body = document.querySelector('.bodyX');\r\n            let open = body.classList.toggle('on');\r\n            if (!open) { open = body.classList.toggle('on'); }\r\n\r\n            var x = 0\r\n            startInterval({\r\n                onHandled: () => {\r\n                    x++\r\n                    if (x === 10) {\r\n                        stopClearInterval()\r\n                        setOnLed('lampId')\r\n                        TerminationFun()\r\n                        setDirection(0)\r\n                    }\r\n                    setCapacity(x)\r\n\r\n                },\r\n                time: 1000,\r\n            })\r\n\r\n            setOnLed(chargingCircuit == 0 ? 'lampId0' : 'lampId1')\r\n            TerminationFun1()\r\n            setDirection(1)\r\n        } else {\r\n            stopClearInterval()\r\n            setOnLed('lampId')\r\n            TerminationFun()\r\n            setDirection(0)\r\n\r\n        }\r\n    }\r\n\r\n    const onRunningOpenKey2 = () => {\r\n        stopClearInterval()\r\n        TerminationFun()\r\n        if (Run) {\r\n            sessionStorage.setItem(\"edges\", JSON.stringify(edges));\r\n            sessionStorage.setItem(\"nodes\", JSON.stringify(nodes));\r\n            sessionStorage.setItem(\"chargingCircuit\", chargingCircuit);\r\n            sessionStorage.setItem(\"Capacitor\", Capacitor);\r\n            sessionStorage.setItem(\"DCSource\", DCSource);\r\n            sessionStorage.setItem(\"DSwitch\", DSwitch);\r\n            sessionStorage.setItem(\"Lamp\", Lamp);\r\n            sessionStorage.setItem(\"Resistor\", Resistor);\r\n            sessionStorage.setItem(\"Galvanometer\", Galvanometer);\r\n            let body = document.querySelector('.bodyX');\r\n            let open = body.classList.toggle('on');\r\n            if (!open) { open = body.classList.toggle('on'); }\r\n\r\n            x = capacity\r\n            startInterval({\r\n                onHandled: () => {\r\n                    if (x > 0) x--; else x = 0\r\n                    if (x === 0) {\r\n                        stopClearInterval()\r\n                        setOnLed('lampId')\r\n                        TerminationFun()\r\n                        setDirection(0)\r\n\r\n                    }\r\n\r\n                    setCapacity(x)\r\n                    // setOnLed('lampId0') \r\n                },\r\n                time: 1000,\r\n            })\r\n\r\n            setOnLed(chargingCircuit == 0 ? 'lampId1' : 'lampId0')\r\n            TerminationFun2()\r\n            setDirection(-1)\r\n        } else {\r\n            stopClearInterval()\r\n            setOnLed('lampId')\r\n            TerminationFun()\r\n            setDirection(0)\r\n\r\n        }\r\n    }\r\n\r\n    const RunFunc = useCallback(() => {\r\n        if (nodes.length == 7) {\r\n            if (edges.length == 8) {\r\n                let status = checkConnections(edges).length > 0 ? false : true;\r\n                if (status == true) {\r\n                    setRun(true)\r\n                    Message({\r\n                        content: 'الدائرة جاهزة لتنفيذ التجربة',\r\n                        type: 'success'\r\n                    })\r\n                } else {\r\n                    Message({\r\n                        content: 'يجب ربط الدائرة بصورة صحيحة',\r\n                        type: 'error'\r\n                    })\r\n                    setRun(false)\r\n                }\r\n            } else {\r\n                Message({\r\n                    content: 'يجب اكمال ربط الدائرة',\r\n                    type: 'error'\r\n                })\r\n                setRun(false)\r\n            }\r\n        } else {\r\n            Message({\r\n                content: 'يجب استخدام جميع عناصر التجربة',\r\n                type: 'error'\r\n            })\r\n            setRun(false)\r\n        }\r\n    }, [edges, nodes])\r\n\r\n    const TerminationFun = useCallback(() => {\r\n        let animatedEdges = edges.map((edge) => {\r\n\r\n            edge.type = 'smoothstep'\r\n            edge.animated = false\r\n            edge.style = {\r\n                strokeWidth: 1.5,\r\n                stroke: 'rgba(0,0,0,1)',\r\n            }\r\n            return edge\r\n        })\r\n        setEdges(animatedEdges)\r\n    }, [edges, nodes])\r\n    const TerminationFun1 = useCallback(() => {\r\n        let animatedEdges = edges.map((edge) => {\r\n            if (chargingCircuitsPossibility[chargingCircuit].includes(edge.id)) {\r\n                edge.type = 'smoothstep'\r\n                edge.animated = true\r\n                edge.style = {\r\n                    strokeWidth: 1.5,\r\n                    stroke: '#FF0072',\r\n                }\r\n            }\r\n            return edge\r\n        })\r\n        setEdges(animatedEdges)\r\n    }, [edges, nodes])\r\n    const TerminationFun2 = useCallback(() => {\r\n        let animatedEdges = edges.map((edge) => {\r\n            if (dischargingCircuitsPossibility[chargingCircuit].includes(edge.id)) {\r\n                edge.type = 'smoothstep'\r\n                edge.animated = true\r\n                edge.style = {\r\n                    strokeWidth: 1.5,\r\n                    stroke: '#FF0072',\r\n                }\r\n            }\r\n            return edge\r\n        })\r\n        setEdges(animatedEdges)\r\n    }, [edges, nodes])\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const connectionLineStyle = {\r\n        strokeWidth: 1.5,\r\n        stroke: 'black',\r\n        type: 'smoothstep',\r\n    };\r\n    const edgeUpdateSuccessful = useRef(true);\r\n\r\n    const onEdgeUpdateStart = useCallback(() => {\r\n        edgeUpdateSuccessful.current = false;\r\n    }, []);\r\n\r\n    const onEdgeUpdate = useCallback((oldEdge, newConnection) => {\r\n        edgeUpdateSuccessful.current = true;\r\n        setEdges((els) => updateEdge(oldEdge, newConnection, els));\r\n    }, [setEdges]);\r\n\r\n    const onEdgeUpdateEnd = useCallback((_, edge) => {\r\n        if (!edgeUpdateSuccessful.current) {\r\n            setEdges((eds) => eds.filter((e) => e.id !== edge.id));\r\n        }\r\n\r\n        edgeUpdateSuccessful.current = true;\r\n    }, [setEdges]);\r\n    useEffect(() => {\r\n        let anchorsArr = document.getElementsByTagName('a');\r\n        if (anchorsArr.length > 0) {\r\n            for (let idx = 0; idx < anchorsArr.length; idx++) {\r\n                if (anchorsArr[idx].href === \"https://reactflow.dev/\") {\r\n                    anchorsArr[idx].style.display = 'none';\r\n                }\r\n            }\r\n        }\r\n    }, [])\r\n    return (\r\n        <>\r\n            {\r\n                ShowInstructions && (\r\n                    <Modal\r\n                        onCancel={() => setShowInstructions(false)}\r\n                        cancelButtonProps={{ style: { display: 'none' } }}\r\n                        okButtonProps={{ style: { display: 'none' } }}\r\n                        title={<Typography.Title level={3} style={{ margin: 0 }} >تعليمات التجربة</Typography.Title>}\r\n                        style={{ direction: 'rtl' }}\r\n                        open={ShowInstructions}\r\n                        width={'50vw'}\r\n                    // bodyStyle={{background:'#F5F5DC'}}\r\n                    >\r\n                        <ul style={{ listStyleType: 'disc' }} >\r\n                            <li>\r\n                                <Typography.Title level={4} style={{ margin: 0 }} >\r\n                                    ادوات التجربة\r\n                                </Typography.Title>\r\n                            </li>\r\n                            <Typography.Paragraph style={{textAlign:'justify'}} >\r\n                                بطارية فولطيتها مناسبة ، كلفانوميتر (G) صفره في وسط التدريجة ، متسعة (C) ذات الصفيحتين المتوازيتين (A) و B) مفتاح مزدوج (k) مقاومة ثابتة (R)، مصباحان متماثلان (L1) و (L2)، اسلاك توصيل.\r\n                            </Typography.Paragraph>\r\n                            <li className='font-bold' >\r\n                                <Typography.Title level={4} style={{ margin: 0 }} >\r\n                                    خطوات التجربة\r\n                                </Typography.Title>\r\n                            </li>\r\n                            <div className='pr-5' >\r\n                                <ul style={{ listStyleType: 'square' }}>\r\n                                    <li>\r\n                                        <Typography.Title level={5} style={{ margin: 0 }} >\r\n                                            عملية الشحن\r\n                                        </Typography.Title>\r\n                                    </li>\r\n                                    <Typography.Paragraph style={{textAlign:'justify'}} >\r\n                                        تربط الدائرة الكهربائية بحيث نجعل المفتاح (K) في الموقع (1) ماذا يعني ذلك؟ يعني ربط صفيحتي المتسعة بين قطبي البطارية لغرض شحنها، لذا نلاحظ انحراف مؤشر الكلفانوميتر (G) لحظيا على أحد جانبي صفر التدرجية (مثلا) نحو اليمين ثم يعود بسرعة إلى الصفر ونلاحظ في الوقت نفسه توهج المصباح ما بضوء ساطع لبرهة من الزمن ثم ينطفئ، وكأن البطارية غير مربوطة في الدائرة. هل يمكننا أن نتسائل الآن عن سبب رجوع مؤشر الكلفانوميتر الى الصفر؟ ان جواب ذلك هو بعد اكتمال عملية شحن المتسعة يتساوى جهد كل صفيحة مع قطب البطارية المتصل بها. فيمكننا القول إن المتسعة صارت مشحونة بكامل شحنتها، وعندها يكون فرق الجهد بين صفيحتي المتسعة يساوي فرق الجهد بين قطبي البطارية، وفي هذه الحالة لا يتوافر فرق الجهد على طرفي المقاومة في الدائرة مما يجعل التيار في الدائرة يساوي صفرا. لذا فإن وجود المتسعة في دائرة التيار المستمر يعد مفتاحا مفتوحا بعد أن تنشحن. وبسبب كون صفيحتي المتسعة معزولتين عن بعضهما، فالإلكترونات تتراكم على الصفيحة B المربوطة بالقطب السالب للبطارية، لذا تشحن بالشحنة السالبة (Q-) في حين تُشحن الصفيحة A المربوطة بالقطب الموجب بالشحنة الموجبة (Q) (وبالمقدار نفسه بطريقة الحث. وقد وجد عملياً ان تيار الشحن يبدأ بمقدار كبير لحظة اغلاق دائرة الشحن ويتناقص مقداره الى الصفر بسرعة عند اكتمال شحنها.\r\n                                    </Typography.Paragraph>\r\n                                    <li>\r\n                                        <Typography.Title level={5} style={{ margin: 0 }} >\r\n                                            عملية التفريغ\r\n                                        </Typography.Title>\r\n                                    </li>\r\n                                    <Typography.Paragraph style={{textAlign:'justify'}} >\r\n                                        نستعمل الدائرة الكهربائية المربوطة في النشاط السابق ولكن نجعل المفتاح (K) في الموقع (2) يعني ربط صفيحتي المتسعة ببعضهما بسلك موصل وبهذا تتم عملية تفريغ المتسعة من شحنتها أي تتعادل شحنة صفيحتيها، لذا نلاحظ انحراف مؤشر الكلفانوميتر (G) لحظيا إلى الجانب الآخر من صفر التدرجية نحو (اليسار)ثم يعود إلى الصفر بسرعة ونلاحظ توهج المصباح 1 في الوقت نفسه بضوء ساطع للحظة ثم ينطفئ. نستنتج من النشاط أن تيارا لحظياً قد انساب في الدائرة الكهربائية يسمى تيار التفريغ، يتلاشى تيار الحر بسرعة (يساوي صفرا) عندما لا يتوافر فرق في الجهد بين صفيحتي المتسعة ان تيار التفريغ يبدأ بمقدار كبير لحظة إغلاق الدائرة (لحظة ربط صفيحتي المتسعة ببعضهما بوساطة سلك موصل) ويهبط إلى الصفر بسرعة بعد إتمام عملية تفريغ المتسعة.\r\n                                    </Typography.Paragraph>\r\n                                </ul>\r\n                            </div>\r\n                        </ul>\r\n                    </Modal>\r\n                )\r\n            }\r\n            {contextHolder}\r\n            <ReactFlowProvider>\r\n                <aside style={{ width: '100px', backgroundColor: \"#F1F1F2\", borderColor: 'rgba(0,0,0,0.5)', borderWidth: '1px' }} className='absolute top-32 bottom-32 right-4 shadow-xl z-10 flex flex-col items-center overflow-x-hidden overflow-y-auto rounded-lg' >\r\n                    <ExpSB2 />\r\n                </aside>\r\n                <aside\r\n                    dir='rtl'\r\n                    style={{ height: '64px', paddingRight: '10px', paddingLeft: '10px', background: '#F1F1F2' }} className='absolute w-full shadow m-0 z-10  ' >\r\n                    <div className='flex justify-between items-center h-full '>\r\n                        <AvatarLogo />\r\n                        <div className='font-bold text-lg' >\r\n                            تجربة شحن و تفريغ المتسعة\r\n                        </div>\r\n                        <div className='flex justify-between items-center' >\r\n                            <Popconfirm\r\n                                title=\"يجب تشغيل الدائرة اولاً\"\r\n                                okButtonProps={{ style: { display: 'none' } }}\r\n                                cancelButtonProps={{ style: { display: 'none' } }}\r\n                                open={RunError}\r\n                                placement='bottomRight'\r\n                                showCancel={false}\r\n                                icon={<WarningOutlined />}\r\n                                overlayInnerStyle={{ paddingTop: 7, paddingBottom: 5 }}\r\n                            >\r\n                                <Button\r\n                                    className='shadow'\r\n                                    style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', borderColor: 'rgba(0,0,0,0.5)', borderWidth: '1px', background:'#E3E3E3' }}\r\n                                    icon={Run ? <BsStopFill color='red' size={'30px'} /> : <BsFillPlayFill size={'30px'} color='green' />}\r\n                                    onClick={() => {\r\n                                        if (RunError) {\r\n                                            setRunError(false)\r\n                                        }\r\n                                        Run ?\r\n                                            stopProcess()\r\n                                            : RunFunc()\r\n                                    }}\r\n                                />\r\n                            </Popconfirm>\r\n                            <Button\r\n                                className='font-semibold mr-2 shadow '\r\n                                onClick={() => navigate('/test2')}\r\n                                style={{ color: 'white', borderColor: 'rgba(0,0,0,0.5)', borderWidth: '1px', background:'rgba(139,61,255,0.8)' }}\r\n                            >\r\n                                إختبر نفسك !\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </aside>\r\n                <div className=' w-screen h-screen m-0 p-0' ref={reactFlowWrapper} >\r\n                    <ReactFlow\r\n                        className='bodyX'\r\n                        style={{ background: '#BFD7ED' }}\r\n                        onNodesChange={onNodesChange}\r\n                        onEdgesChange={onEdgesChange}\r\n                        onInit={setReactFlowInstance}\r\n                        onNodesDelete={onDeleteNode}\r\n                        onDragOver={onDragOver}\r\n                        nodeTypes={nodeTypes}\r\n                        onConnect={onConnect}\r\n                        onDrop={onDrop}\r\n                        nodes={nodes}\r\n                        edges={edges}\r\n                        fitView\r\n                        connectionLineStyle={connectionLineStyle}\r\n                        onEdgeUpdate={onEdgeUpdate}\r\n                        onEdgeUpdateStart={onEdgeUpdateStart}\r\n                        onEdgeUpdateEnd={onEdgeUpdateEnd}\r\n                        connectionLineComponent={CustomConnectionLine}\r\n                    >\r\n                        <Controls style={{ display: 'flex', flexDirection: 'column-reverse', borderColor: 'rgba(0,0,0,0.4)', borderWidth: '1px', borderRadius:'4px' }} >\r\n                            <ControlButton\r\n                                onClick={() => setShowInstructions(true)}\r\n                            >\r\n                                <GrNotes />\r\n                            </ControlButton>\r\n                            <ControlButton\r\n                                onClick={() =>{\r\n                                    localStorage.clear();\r\n                                    sessionStorage.clear();\r\n                                    window.location.reload(true);\r\n                                }}\r\n                            >\r\n                                <GrPowerReset />\r\n                            </ControlButton>\r\n                        </Controls >\r\n                    </ReactFlow>\r\n                </div>\r\n            </ReactFlowProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Workspace2;"],"names":["ExpSB2store","create","set","volt","setVolt","onSwitchKey","setOnSwitchKey","Capacitor","JSON","parse","sessionStorage","getItem","setCapacitor","DCSource","setDCSource","DSwitch","setDSwitch","Lamp","setLamp","Resistor","setResistor","Galvanometer","setGalvanometer","Run","setRun","RunError","setRunError","ExpSB2","sidebarElement","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","color","placement","title","style","marginBottom","marginTop","className","draggable","alt","src","dSwitch","capacitor","battery","ResistorIco","height","width","LampIco","galvanometerIco","capacitance","capacity0","capacity1","capacity2","capacity3","capacity4","capacity5","capacity6","capacity7","capacity8","capacity9","capacity10","id","data","useState","capacity","setCapacity","rotateControlRef","useRef","updateNodeInternals","useUpdateNodeInternals","rotation","setRotation","num","useEffect","current","selection","select","dragHandler","drag","on","evt","dx","x","dy","y","deg","Math","atan2","PI","call","transform","styles","ref","display","preview","switchCueArrow","background","type","position","memo","isConnectable","onRunningOpenKey1","onRunningOpenKey2","openKey2","keyOpenClose","setKeyOpenClose","onClick","openKey1","marginLeft","marginRight","onLed","led","setLed","first","zIndex","GalvanometerIco","direction","Middle","x1","y1","x2","y2","markerStart","stroke","strokeWidth","Right","Left","markerWidth","markerHeight","refX","refY","orient","points","fill","cx","cy","r","borderColor","galvanometerImg","top","left","right","bottom","resistor","intervalID","fromX","fromY","toX","toY","connectionLineStyle","getStraightPath","sourceX","sourceY","targetX","targetY","edgePath","d","nodeTypes","startInterval","onHandled","time","setInterval","stopClearInterval","clearInterval","message","messageApi","contextHolder","Message","content","open","reactFlowWrapper","useNodesState","Object","assign","nodes","setNodes","onNodesChange","useEdgesState","edges","setEdges","onEdgesChange","lampId","setLampId","parseInt","chargingCircuit","setChargingCircuit","lampsId","status","chargingCircuitsPossibility","dischargingCircuitsPossibility","reactFlowInstance","setReactFlowInstance","getId","prev","onDeleteNode","useCallback","e","stopProcess","onDragOver","preventDefault","dropEffect","setOnLed","TerminationFun","setDirection","onDrop","reactFlowBounds","getBoundingClientRect","getData","project","clientX","clientY","newNode","label","nds","concat","onConnect","params","source","sourceHandle","targetHandle","eds","addEdge","target","ShowInstructions","setShowInstructions","map","node","setItem","stringify","body","document","querySelector","classList","toggle","TerminationFun1","TerminationFun2","RunFunc","length","correctConnections","filter","edge","includes","getElementById","checkConnections","animatedEdges","animated","navigate","useNavigate","edgeUpdateSuccessful","onEdgeUpdateStart","onEdgeUpdate","oldEdge","newConnection","els","updateEdge","onEdgeUpdateEnd","_","anchorsArr","getElementsByTagName","idx","href","onCancel","cancelButtonProps","okButtonProps","level","margin","listStyleType","textAlign","backgroundColor","borderWidth","dir","paddingRight","paddingLeft","AvatarLogo","showCancel","icon","WarningOutlined","overlayInnerStyle","paddingTop","paddingBottom","justifyContent","alignItems","size","onInit","onNodesDelete","fitView","connectionLineComponent","CustomConnectionLine","flexDirection","borderRadius","localStorage","clear","window","location","reload"],"sourceRoot":""}